#1)АТБАШ
class Atbash:
    alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"

    def __init__(self):
        lowercase_code = {x: y for x, y in zip(self.alphabet, self.alphabet[::-1])}
        uppercase_code = {x.upper(): y.upper() for x, y in zip(self.alphabet, self.alphabet[::-1])}
        self._encode = lowercase_code
        self._encode.update(uppercase_code)

    def encode(self, text):
        return ''.join([self._encode.get(char, char) for char in text])


cipher = Atbash()
line = input()
while line != '.':
    print(cipher.encode(line))
    line = input()

Расшифровка:
Шифр Цезаря — это вид шифра подстановки, в котором каждый символ в открытом тексте заменяется символом, находящимся на некотором постоянном числе позиций левее или правее него в алфавите. Например, в шифре со сдвигом вправо на 3, А была бы заменена на Г, Б станет Д, и так далее.
Шифр назван в честь римского императора Гая Юлия Цезаря, использовавшего его для секретной переписки со своими генералами.
Следующая часть работы зашифрована шифром Цезаря. Допишите метод decode и расшифруйте следующий раздел лабораторной работы. Подумайте, почему вам не сообщили ключ шифрования и что вам с этим делать.

#2)Цезарь
Ключ найду из соображений, что слово Кыжг=Шифр, т.е К(12)-->Ш(26), те ключ 14 
(А по честному перебирал бы от 1 до 33 ключи и ждал пока не появится осмысленная запись)

s=str(input())
A=list(s.lower())
B=['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
k=14
for i in range (len(A)):
    if A[i]=='а':
        A[i]=B[(B.index('а')+k)%len(B)]
    elif A[i] == 'б':
        A[i] = B[(B.index('б') + k) % len(B)]
    elif A[i] == 'в':
        A[i] = B[(B.index('в') + k) % len(B)]
    elif A[i] == 'г':
        A[i] = B[(B.index('г') + k) % len(B)]
    elif A[i]=='д':
        A[i]=B[(B.index('д')+k)%len(B)]
    elif A[i]=='е':
        A[i]=B[(B.index('е')+k)%len(B)]
    elif A[i]=='ё':
        A[i]=B[(B.index('ё')+k)%len(B)]
    elif A[i]=='ж':
        A[i]=B[(B.index('ж')+k)%len(B)]
    elif A[i]=='з':
        A[i]=B[(B.index('з')+k)%len(B)]
    elif A[i]=='и':
        A[i]=B[(B.index('и')+k)%len(B)]
    elif A[i]=='й':
        A[i]=B[(B.index('й')+k)%len(B)]
    elif A[i]=='к':
        A[i]=B[(B.index('к')+k)%len(B)]
    elif A[i]=='л':
        A[i]=B[(B.index('л')+k)%len(B)]
    elif A[i]=='м':
        A[i]=B[(B.index('м')+k)%len(B)]
    elif A[i]=='н':
        A[i]=B[(B.index('н')+k)%len(B)]
    elif A[i]=='о':
        A[i]=B[(B.index('о')+k)%len(B)]
    elif A[i]=='п':
        A[i]=B[(B.index('п')+k)%len(B)]
    elif A[i]=='р':
        A[i]=B[(B.index('р')+k)%len(B)]
    elif A[i]=='с':
        A[i]=B[(B.index('с')+k)%len(B)]
    elif A[i]=='т':
        A[i]=B[(B.index('т')+k)%len(B)]
    elif A[i]=='у':
        A[i]=B[(B.index('у')+k)%len(B)]
    elif A[i]=='ф':
        A[i]=B[(B.index('ф')+k)%len(B)]
    elif A[i]=='х':
        A[i]=B[(B.index('х')+k)%len(B)]
    elif A[i]=='ц':
        A[i]=B[(B.index('ц')+k)%len(B)]
    elif A[i]=='ч':
        A[i]=B[(B.index('ч')+k)%len(B)]
    elif A[i]=='ш':
        A[i]=B[(B.index('ш')+k)%len(B)]
    elif A[i]=='щ':
        A[i]=B[(B.index('щ')+k)%len(B)]
    elif A[i]=='ъ':
        A[i]=B[(B.index('ъ')+k)%len(B)]
    elif A[i]=='ы':
        A[i]=B[(B.index('ы')+k)%len(B)]
    elif A[i]=='ь':
        A[i]=B[(B.index('ь')+k)%len(B)]
    elif A[i]=='э':
        A[i]=B[(B.index('э')+k)%len(B)]
    elif A[i]=='ю':
        A[i]=B[(B.index('ю')+k)%len(B)]
    elif A[i]=='я':
        A[i]=B[(B.index('я')+k)%len(B)]
    print(A[i], sep='', end='')

Расшифровка:
Шифр простой замены.
Поздравляем с расшифровкой раздела
Итак, вы догадались почему шифр цезаря не является криптостойким: слишком мала мощность множества ключей и нужный ключ легко найти методом полного перебора.
Можно ли увеличить криптостойкость, не меняя метод шифрования? да, можно. если заменять один символ алфавита на определённый другой символ того же алфавита по какой-то таблице замен, то сама таблица замен и является ключом.
множество ключей — это множество возможных таблиц простых замен. для русского алфавита мощность множества таблиц простых замен равна факториалу от 33. 33! = 8683317618811886495518194401280000000
Если тратить на проверку одного варианта 0.000001 секунды, получится 2.8e+23 лет. может показаться, что шифр простой замены вполне криптостойкий, однако это не так. Его достаточно просто взломать при помощи частотного анализа. Дело в том, что частота появления заданной буквы алфавита в достаточно длинных текстах одна и та же для разных текстов одного языка.
Если в шифротексте будет символ с вероятностью появления, аналогичной стандартной для языка, то можно предположить, что он и является указанной зашифрованной буквой.
метод частотного криптоанализа известен с ix-го века, хотя наиболее известным случаем его применения в реальной жизни, возможно, является дешифровка египетских иероглифов в 1822 году.
Итак, следующая часть работы зашифрована при помощи следующей программы:
....
программу для частотного анализа следует написать самостоятельно. успехов!

#3)
Частотный анализ:
s=str(input())
A=list(s.lower())
B=['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
k=14
k1=0
k2=0
k3=0
k4=0
k5=0
k6=0
k7=0
k8=0
k9=0
k10=0
k11=0
k12=0
k13=0
k14=0
k15=0
k16=0
k17=0
k18=0
k19=0
k20=0
k21=0
k22=0
k23=0
k24=0
k25=0
k26=0
k27=0
k28=0
k29=0
k30=0
k31=0
k32=0
k33=0
for i in range (len(A)):
    if A[i]=='а':
        k1=k1+1
    elif A[i] == 'б':
        k2=k2+1
    elif A[i] == 'в':
        k3=k3+1
    elif A[i] == 'г':
        k4=k4+1
    elif A[i]=='д':
        k5=k5+1
    elif A[i]=='е':
        k6=k6+1
    elif A[i]=='ё':
        k7=k7+1
    elif A[i]=='ж':
        k8=k8+1
    elif A[i]=='з':
        k9=k9+1
    elif A[i]=='и':
        k10=k10+1
    elif A[i]=='й':
        k11=k11+1
    elif A[i]=='к':
        k12=k12+1
    elif A[i]=='л':
        k13=k13+1
    elif A[i]=='м':
        k14=k14+1
    elif A[i]=='н':
        k15=k15+1
    elif A[i]=='о':
        k16=k16+1
    elif A[i]=='п':
        k17=k17+1
    elif A[i]=='р':
        k18=k18+1
    elif A[i]=='с':
        k19=k19+1
    elif A[i]=='т':
        k20=k20+1
    elif A[i]=='у':
        k21=k21+1
    elif A[i]=='ф':
        k22=k22+1
    elif A[i]=='х':
        k23=k23+1
    elif A[i]=='ц':
        k24=k24+1
    elif A[i]=='ч':
        k25=k25+1
    elif A[i]=='ш':
        k26=k26+1
    elif A[i]=='щ':
        k27=k27+1
    elif A[i]=='ъ':
        k28=k28+1
    elif A[i]=='ы':
        k29=k29+1
    elif A[i]=='ь':
        k30=k30+1
    elif A[i]=='э':
        k31=k31+1
    elif A[i]=='ю':
        k32=k32+1
    elif A[i]=='я':
        k33=k33+1
print('%а: ', (k1/len(A))*100,
          '%б: ', (k2/len(A))*100,
          '%в: ', (k3 / len(A)) * 100,
          '%г: ', (k4 / len(A)) * 100,
          '%д: ', (k5 / len(A)) * 100,
          '%е: ', (k6 / len(A)) * 100,
          '%ё: ', (k7 / len(A)) * 100,
          '%ж: ', (k8 / len(A)) * 100,
          '%з: ', (k9 / len(A)) * 100,
          '%и: ', (k10 / len(A)) * 100,
          '%й: ', (k11 / len(A)) * 100,
          '%к: ', (k12 / len(A)) * 100,
          '%л: ', (k13 / len(A)) * 100,
          '%м: ', (k14 / len(A)) * 100,
          '%н: ', (k15 / len(A)) * 100,
          '%о: ', (k16 / len(A)) * 100,
          '%п: ', (k17 / len(A)) * 100,
          '%р: ', (k18 / len(A)) * 100,
          '%с: ', (k19 / len(A)) * 100,
          '%т: ', (k20 / len(A)) * 100,
          '%у: ', (k21 / len(A)) * 100,
          '%ф: ', (k22 / len(A)) * 100,
          '%х: ', (k23 / len(A)) * 100,
          '%ц: ', (k24 / len(A)) * 100,
          '%ч: ', (k25 / len(A)) * 100,
          '%ш: ', (k26 / len(A)) * 100,
          '%щ: ', (k27 / len(A)) * 100,
          '%ъ: ', (k28 / len(A)) * 100,
          '%ы: ', (k29 / len(A)) * 100,
          '%ь: ', (k30 / len(A)) * 100,
          '%э: ', (k31 / len(A)) * 100,
          '%ю: ', (k32 / len(A)) * 100,
          '%я: ', (k33 / len(A)) * 100)
АНАЛИЗИРУЕМОЕ: Мэяхющыегс ажцмцянщюгщс егпжцо ажцшбцы йэсщюз иояищбши сюцрцэяпэогбюзщ егпжз. Эьт Эях-Чгюмг о шоцгв жэьцбэв ацчэйэя, лбц цьзлюзщ сцюцэяпэогбюзщ егпжз мцоцяхюц-бэчг ажцшбц ацммэфбши лэшбцбюцст чжгабцэюэягйт г ащжозс ажщмяцнгя гшацяхйцоэбх сюцрцэяпэогбюзщ егпжз. О Щожцащ бэчгщ егпжз ьзяг оащжозщ цагшэюз о 1467 рцмт гбэяхиюшчгс эжвгбщчбцжцс Ящцю Ьэббгшбэ Эяхьщжбг. О XVI ощчщ ющсщёчгы эььэб Гцрэюю Бжгбщсгы о шоцщы чюгрщ “Шбщюцржэпги” ажщмшбэогя швщст ацягэяпэогбюцрц егпжцоэюги о огмщ бэьягёз. Ьцящщ шяцнюзы оэжгэюб ш гшацяхйцоэюгщс шсщеэююзв эяпэогбцо ьзя цагшэю о 1563 рцмт Мнэсьэббгшбэ мщяяэ Ацжбэ о щрц чюгрщ “Ажц шчжзбтф йюэлгсцшбх цбмщяхюзв ьтчо”. Ацшящмюгс шяцоцс о жэйогбгг ацягэяпэогбюзв егпжцо сцнюц шлгбэбх жцбцжюзщ сэегюз, ажгсщжцс чцбцжцы сцнюц шлгбэбх ющсщёчтф сэегют Enigma, жэйжэьцбэююэи о 1917 р. Штбх ацягэяпэогбюзв егпжцо йэчяфлщюэ о сюцрцчжэбюцс ажгсщющюгг жэйяглюзв егпжцо ажцшбцы йэсщюз ч цажщмщящююцст лгшят ьтчо егпжтщсцрц бщчшбэ. Бц щшбх ч чэнмцы ьтчощ ац цбмщяхюцшбг ажгсщюищбши цмгю гй егпжцо ажцшбцы йэсщюз. Егпж Огнщющжэ шцшбцгб гй ацшящмцоэбщяхюцшбг ющшчцяхчгв егпжцо Ёщйэжи ш жэйяглюзсг йюэлщюгисг шмогрэ. Мяи йэегпжцозоэюги сцнщб гшацяхйцоэбхши бэьягёэ эяпэогбцо, юэйзоэщсэи чоэмжэб (бэьягёэ) Огнщющжэ. Ажгсщюгбщяхюц ч жтшшчцст эяпэогбт бэьягёэ Огнщющжэ шцшбэояищбши гй шбжцч ац 33 шгсоцяцо, ажглдс чэнмэи шящмтфъэи шбжцчэ шмогрэщбши юэ ющшчцяхчц ацйгёгы. Бэчгс цьжэйцс, о бэьягёщ ацятлэщбши 33 жэйяглюзв егпжцо Ёщйэжи. Юэ жэйюзв кбэаэв чцмгжцочг егпж Огнщющжэ гшацяхйтщб жэйяглюзщ эяпэогбз гй кбцы бэьягёз. Юэ чэнмцс кбэащ егпжцоэюги гшацяхйтфбши жэйяглюзщ эяпэогбз, озьгжэщсзщ о йэогшгсцшбг цб шгсоцяэ чяфлщоцрц шяцоэ. Юэажгсщж, щшяг чяфлщоцщ шяцоц “ШЭБ”, бц ащжоэи ьтчоэ цбчжзбцрц бщчшбэ егпжтщбши ш гшацяхйцоэюгщс эяпэогбэ “Ш’, обцжэи “Э”, бжщбхи “Б”, лщбоджбэи шюцоэ “Ш” г бэч мэящщ. Ажцржэссэ егпжцоэюги егпжцс Огнщющжэ:Ацшящмюгы жэймщя жэьцбз йэегпжцоэю егпжцс Огнщющжэ ш ющгйощшбюзс чцмцозс шяцоцс. Ацмшчэйчэ мяи шэсзв шбцычгв чжгабцэюэягбгчцо: мягюэ чцмцоцрц шяцоэ 8.
РЕЗУЛЬТАТ АНАЛИЗА: 
%а:  2.2908366533864544 
%б:  5.47808764940239 
%в:  0.7470119521912351 
%г:  7.420318725099602 
%д:  0.099601593625498 
%е:  1.294820717131474 
%ё:  0.5478087649402391 
%ж:  4.482071713147411 
%з:  2.1912350597609564 
%и:  1.593625498007968 
%й:  1.8426294820717133 
%к:  0.14940239043824702 
%л:  0.9462151394422311 
%м:  1.7928286852589643 
%н:  0.796812749003984 
%о:  4.681274900398407 
%п:  1.743027888446215 
%р:  0.9462151394422311 
%с:  2.888446215139442 
%т:  1.245019920318725 
%у:  0.0 
%ф:  0.398406374501992 
%х:  1.245019920318725 
%ц:  8.01792828685259 
%ч:  2.49003984063745 
%ш:  4.033864541832669 
%щ:  5.4282868525896415 
%ъ:  0.049800796812749 
%ы:  0.697211155378486 
%ь:  1.245019920318725 
%э:  7.968127490039841 
%ю:  4.531872509960159 
%я:  4.083665338645418
Видно, что самая частая Ц, тогда разумно предположить Ц=О, а дальше гениальные размышления:
Егпж = Шифр => E=Ш, Г=И, П=Ф, Ж=Р (очев.)
Видно, что далее шифр Виженера (по коду)=> Огнщющжэ=виженера
Очевидно, что о 1467 рцмт= в 1467 году
А это, очев, О XVI ощчщ = в 16 веке
Ящцю=?еон, в википедии встречается Леон Альберти => Ящцю Ьэббгшбэ Эяхьщжбг = Леон баттиста АЛьберти
А далее по найденным данным, можно восстанавливать осмысленные слова из логики
=> Бжгбщсгы=Тритемий (фигурирует в википедии)
1563 сразу даёт: Ацжбэ=Порта

По найденным данным часть расшифрую, а потом из контекста восстановлю таблицу:
дальнейшим продолжением шифров про?той ?амен? ?вл?ет?? многоалфавитн?е шифр?. абу аль-кинди в ?вои? работа? пока?ал, ?то об??н?е моноалфавитн?е шифр? довольно-таки про?то подда?т?? ?а?тотному криптоанали?у и перв?м предложил и?поль?овать многоалфавитн?е шифр?. в европе такие шифр? б?ли вперв?е опи?ан? в 1467 году италь?н?ким ар?итектором леон батти?та альберти. в xvi веке неме?кий аббат иоганн тритемий в ?воей книге “?тенографи?” пред?тавил ??ему полиалфавитного шифровани? в виде табли??. более ?ложн?й вариант ? и?поль?ованием ?мешанн?? алфавитов б?л опи?ан в 1563 году джамбатти?та делла порта в его книге “про ?кр?ту? ?на?имо?ть отдельн?? букв”. по?ледним ?ловом в ра?витии полиалфавитн?? шифров можно ??итать роторн?е машин?, примером которой можно ??итать неме?ку? машину enigma, ра?работанна? в 1917 г. ?уть полиалфавитн?? шифров ?акл??ена в многократном применении ра?ли?н?? шифров про?той ?амен? к определенному ?и?лу букв шифруемого тек?та. то е?ть к каждой букве по отдельно?ти примен?ет?? один и? шифров про?той ?амен?
Отсюда восстановлен алфавит.
Код Расшифровки: (у нет, тк она встречается 0 раз в тексте)
s=str(input())
A=list(s.lower())
B=['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
for i in range (len(A)):
    if A[i]=='а':
        A[i]='п'
    elif A[i] == 'б':
        A[i] = 'т'
    elif A[i] == 'в':
        A[i] = 'х'
    elif A[i] == 'г':
        A[i] = 'и'
    elif A[i]=='д':
        A[i] = 'ё'
    elif A[i]=='е':
        A[i] = 'ш'
    elif A[i]=='ё':
        A[i] = 'ц'
    elif A[i]=='ж':
        A[i] = 'р'
    elif A[i]=='з':
        A[i] = 'ы'
    elif A[i]=='и':
        A[i] = 'я'
    elif A[i]=='й':
        A[i] = 'з'
    elif A[i]=='к':
        A[i] = 'э'
    elif A[i]=='л':
        A[i] = 'ч'
    elif A[i]=='м':
        A[i] = 'д'
    elif A[i]=='н':
        A[i] = 'ж'
    elif A[i]=='о':
        A[i] = 'в'
    elif A[i]=='п':
        A[i] = 'ф'
    elif A[i]=='р':
        A[i] = 'г'
    elif A[i]=='с':
        A[i] = 'м'
    elif A[i]=='т':
        A[i] = 'у'
    elif A[i]=='у':
        A[i] = '?'
    elif A[i]=='ф':
        A[i] = 'ю'
    elif A[i]=='х':
        A[i] = 'ь'
    elif A[i]=='ц':
        A[i] = 'о'
    elif A[i]=='ч':
        A[i] = 'к'
    elif A[i]=='ш':
        A[i] = 'с'
    elif A[i]=='щ':
        A[i] = 'е'
    elif A[i]=='ъ':
        A[i] = 'щ'
    elif A[i]=='ы':
        A[i] = 'й'
    elif A[i]=='ь':
        A[i] = 'б'
    elif A[i]=='э':
        A[i] = 'а'
    elif A[i]=='ю':
        A[i] = 'н'
    elif A[i]=='я':
        A[i] = 'л'
    print(A[i], sep='', end='')
Расшифровка:
Шифр Виженера (полиалфавитной замены)
Дальнейшим продолжением шифров простой замены является многоалфавитные шифры. абу аль-кинди в своих работах показал, что обычные моноалфавитные шифры довольно-таки просто поддаются частотному криптоанализу и первым предложил использовать многоалфавитные шифры. в европе такие шифры были впервые описаны в 1467 году итальянским архитектором леон баттиста альберти. в xvi веке немецкий аббат иоганн тритемий в своей книге “стенография” представил схему полиалфавитного шифрования в виде таблицы. более сложный вариант с использованием смешанных алфавитов был описан в 1563 году джамбаттиста делла порта в его книге “про скрытую значимость отдельных букв”. последним словом в развитии полиалфавитных шифров можно считать роторные машины, примером которой можно считать немецкую машину enigma, разработанная в 1917 г. суть полиалфавитных шифров заключена в многократном применении различных шифров простой замены к определенному числу букв шифруемого текста. то есть к каждой букве по отдельности применяется один из шифров простой замены.
Шифр виженера состоит из последовательности нескольких шифров цезаря с различными значениями сдвига. для зашифровывания может использоваться таблица алфавитов, называемая квадрат (таблица) виженера. применительно к русскому алфавиту таблица виженера составляется из строк по 33 символов, причём каждая следующая строка сдвигается на несколько позиций. таким образом, в таблице получается 33 различных шифров цезаря. на разных этапах кодировки шифр виженера использует различные алфавиты из этой таблицы. на каждом этапе шифрования используются различные алфавиты, выбираемые в зависимости от символа ключевого слова. например, если ключевое слово “сат”, то первая буква открытого текста шифруется с использованием алфавита “с’, вторая “а”, третья “т”, четвёртая снова “с” и так далее.
Программа шифрования шифром виженера:
....
последний раздел работы зашифрован шифром виженера с неизвестным кодовым словом. подсказка для самых стойких криптоаналитиков: длина кодового слова 8.
#4)Виженер:

from itertools import cycle

alp = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'

def encode_vijn(text, keytext):
    f = lambda arg: alp[(alp.index(arg[0])+alp.index(arg[1])%33)%33]
    return ''.join(map(f, zip(text, cycle(keytext))))


def decode_vijn(coded_text, keytext):
    f = lambda arg: alp[alp.index(arg[0])-alp.index(arg[1])%33]
    return ''.join(map(f, zip(coded_text, cycle(keytext))))

coded_text=str(input('зашифрованное: '))
keytext=str(input('ключ: '))
print(decode_vijn(coded_text, keytext))
Расшифровка: Энигма интересующиеся могут почитать про реализацию сложного полиалфавитного шифра компьютерную модель шифра энигмы элементы методов шифрования использовавшихся в машинах этой серии используются до сих пор


